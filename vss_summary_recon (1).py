# -*- coding: utf-8 -*-
"""vss_summary_recon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ILfu-REtOUMb_CQc3TtnQrPnmv13hFPf
"""

import pandas as pd
import numpy as np
import re
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from IPython.display import HTML, display
from datetime import datetime

# File paths
CSV_FILE = '/content/vss_detail_torpagoinc_visa_23.234.csv'
TXT_FILE = '/content/VSS_Trpginc_1000771423_2025042310453720.txt'

# Load CSV file with error handling
def load_csv(file_path):
    try:
        df = pd.read_csv(file_path)
        print("\nCSV File Summary:")
        print("Number of rows:", len(df))
        print("Columns found:", df.columns.tolist())
        return df
    except Exception as e:
        print(f"Error loading CSV file: {str(e)}")
        return None

def process_csv(df):
    if df is None:
        return 0, 0

    try:
        required_columns = ['Type', 'Amount']
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            print(f"Warning: Missing required columns: {missing_columns}")
            print("Available columns:", df.columns.tolist())
            return 0, 0
        df['Type'] = df['Type'].str.strip().str.upper()
        df['Amount'] = pd.to_numeric(df['Amount'], errors='coerce')
        sales_total = df[df['Type'] == 'SALE']['Amount'].sum()
        refund_total = -abs(df[df['Type'] == 'REFUND']['Amount'].sum())
        sales_total = 0 if pd.isna(sales_total) else float(sales_total)
        refund_total = 0 if pd.isna(refund_total) else float(refund_total)

        return sales_total, refund_total

    except Exception as e:
        print(f"Error processing CSV data: {str(e)}")
        return 0, 0

def load_txt(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
        print(f"\nTXT File Summary:")
        print(f"Number of lines: {len(lines)}")
        return lines
    except Exception as e:
        print(f"Error loading TXT file: {str(e)}")
        return []


def process_txt(lines):
    purchase_amount = 0
    refund_amount = 0
    purchase_count = 0
    refund_count = 0

    try:
        for line in lines:
            if "PURCHASE" in line:
                matches = re.findall(r'\s+(\d+)\s+[0-9,.]+\s+(\d+)\s+([0-9,.]+)', line)
                if matches:
                    count = int(matches[0][1])
                    amount = float(matches[0][2].replace(',', ''))
                    purchase_count = count
                    purchase_amount = amount

            elif "MERCHANDISE CREDIT" in line:
                matches = re.findall(r'\s+(\d+)\s+([0-9,.]+)', line)
                if matches:
                    count = int(matches[0][0])
                    amount = float(matches[0][1].replace(',', ''))
                    refund_count = count
                    refund_amount = amount

        print("\nTXT Transaction Summary:")
        print(f"Total Purchases: ${purchase_amount:,.2f}")
        print(f"Total Refunds: ${refund_amount:,.2f}")
        print(f"Number of Purchases: {purchase_count}")
        print(f"Number of Refunds: {refund_count}")

    except Exception as e:
        print(f"Error processing TXT data: {str(e)}")

    return {
        'purchase_count': purchase_count,
        'purchase_amount': purchase_amount,
        'refund_count': refund_count,
        'refund_amount': refund_amount
    }

def main():
    df = load_csv(CSV_FILE)
    csv_sales, csv_refunds = process_csv(df)
    txt_lines = load_txt(TXT_FILE)
    txt_results = process_txt(txt_lines)
    summary_df = pd.DataFrame({
        'Source': ['CSV File', 'TXT File'],
        'Sales Amount': [f"${csv_sales:,.2f}", f"${txt_results['purchase_amount']:,.2f}"],
        'Refund Amount': [f"${csv_refunds:,.2f}", f"${txt_results['refund_amount']:,.2f}"],
        'Sales Count': [len(df[df['Type'] == 'SALE']), txt_results['purchase_count']],
        'Refund Count': [len(df[df['Type'] == 'REFUND']), txt_results['refund_count']]
    })

    print("\nTransaction Summary:")
    print("=" * 80)
    print(summary_df.to_string(index=False))
    print("=" * 80)

if __name__ == "__main__":
    main()

def create_colab_dashboard():
    # Process data
    df = load_csv(CSV_FILE)
    csv_sales, csv_refunds = process_csv(df)
    txt_lines = load_txt(TXT_FILE)
    txt_results = process_txt(txt_lines)

    # Create styling
    display(HTML("""
    <style>
    .metric-row {
        display: flex;
        justify-content: space-between;
        margin: 20px 0;
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .metric-card {
        text-align: center;
        padding: 0 20px;
    }
    .metric-title {
        font-size: 16px;
        color: #666;
        margin-bottom: 8px;
    }
    .metric-value {
        font-size: 28px;
        font-weight: bold;
        color: #1f77b4;
    }
    .metric-delta {
        font-size: 14px;
        color: #28a745;
    }
    .metric-delta.negative {
        color: #dc3545;
    }
    </style>
    """))

    # Create header
    print("\n📊 Transaction Reconciliation Dashboard")
    print(f"Last Updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 80)

    # Create horizontal metrics display
    metrics_html = f"""
    <div class="metric-row">
        <div class="metric-card">
            <div class="metric-title">Sales Amount</div>
            <div class="metric-value">${csv_sales:,.2f}</div>
            <div class="metric-delta {'negative' if csv_sales < txt_results['purchase_amount'] else ''}">
                vs TXT: ${txt_results['purchase_amount']:,.2f}
                ({(csv_sales - txt_results['purchase_amount']):+,.2f})
            </div>
        </div>
        <div class="metric-card">
            <div class="metric-title">Refund Amount</div>
            <div class="metric-value">${abs(csv_refunds):,.2f}</div>
            <div class="metric-delta {'negative' if abs(csv_refunds) < txt_results['refund_amount'] else ''}">
                vs TXT: ${txt_results['refund_amount']:,.2f}
                ({(abs(csv_refunds) - txt_results['refund_amount']):+,.2f})
            </div>
        </div>
        <div class="metric-card">
            <div class="metric-title">Net Amount</div>
            <div class="metric-value">${(csv_sales + csv_refunds):,.2f}</div>
            <div class="metric-delta {'negative' if (csv_sales + csv_refunds) < (txt_results['purchase_amount'] - txt_results['refund_amount']) else ''}">
                vs TXT: ${(txt_results['purchase_amount'] - txt_results['refund_amount']):,.2f}
                ({(csv_sales + csv_refunds - (txt_results['purchase_amount'] - txt_results['refund_amount'])):+,.2f})
            </div>
        </div>
    </div>
    """
    display(HTML(metrics_html))

    # Create detailed comparison table with improved styling
    comparison_df = pd.DataFrame({
        'Metric': ['Sales Amount', 'Refund Amount', 'Sales Count', 'Refund Count'],
        'CSV File': [
            f"${csv_sales:,.2f}",
            f"${abs(csv_refunds):,.2f}",
            f"{len(df[df['Type'] == 'SALE']):,}",
            f"{len(df[df['Type'] == 'REFUND']):,}"
        ],
        'TXT File': [
            f"${txt_results['purchase_amount']:,.2f}",
            f"${txt_results['refund_amount']:,.2f}",
            f"{txt_results['purchase_count']:,}",
            f"{txt_results['refund_count']:,}"
        ],
        'Difference': [
            f"${csv_sales - txt_results['purchase_amount']:+,.2f}",
            f"${abs(csv_refunds) - txt_results['refund_amount']:+,.2f}",
            f"{len(df[df['Type'] == 'SALE']) - txt_results['purchase_count']:+,}",
            f"{len(df[df['Type'] == 'REFUND']) - txt_results['refund_count']:+,}"
        ]
    })

        # Style the dataframe
    def color_negative_diff(val):
        try:
            if isinstance(val, str):
                if val.startswith('$'):
                    num = float(val.replace('$', '').replace(',', '').replace('+', ''))
                    return 'color: #dc3545' if num < 0 else 'color: #28a745'
                elif val.startswith('-'):
                    return 'color: #dc3545'
                elif val.startswith('+'):
                    return 'color: #28a745'
        except:
            return ''
        return ''

    styled_df = comparison_df.style\
        .set_properties(**{
            'background-color': '#f8f9fa',
            'border-color': '#ffffff',
            'border-style': 'solid',
            'border-width': '1px',
            'text-align': 'center',
            'padding': '12px'
        })\
        .set_table_styles([
            {'selector': 'th', 'props': [
                ('background-color', '#1f77b4'),
                ('color', 'white'),
                ('font-weight', 'bold'),
                ('text-align', 'center'),
                ('padding', '12px')
            ]}
        ])\
        .map(color_negative_diff, subset=['Difference'])  # Changed from applymap to map

    print("\nDetailed Comparison:")
    display(styled_df)

    # Show reconciliation status
    tolerance = 0.01
    print("\nReconciliation Status:")
    if abs(csv_sales - txt_results['purchase_amount']) <= tolerance and \
       abs(abs(csv_refunds) - txt_results['refund_amount']) <= tolerance:
        print("✅ Files are reconciled! All amounts match within tolerance.")
    else:
        print("❌ Discrepancy detected! Please review the differences above.")

# Run the dashboard
create_colab_dashboard()