# -*- coding: utf-8 -*-
"""mc_summary_recon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qAvX_bNvjNgORf8hFqSeQy6hSps7iZso
"""

import pandas as pd
import re

# File paths
SUMMARY_FILE = '/content/T140-00000034350-2025-04-28-T1408519211806.ASCII.T140.20250428141353.txt'
MC_DETAIL_FILE = '/content/mc_detail_20250428.csv'

def parse_summary_file(file_path):
    try:
        cycles_data = {}
        with open(file_path, 'r') as file:
            lines = file.readlines()

        for line in lines:
            if line.strip().startswith('CYCLE') and 'DR' in line:
                parts = line.strip().split()
                cycle = parts[1].zfill(2)
                amount = float(parts[-3].replace(',', ''))
                cycles_data[cycle] = amount

        summary_df = pd.DataFrame({
            'Cycle': list(cycles_data.keys()),
            'Summary Amount': list(cycles_data.values())
        })

        return summary_df

    except Exception as e:
        print(f"Error parsing summary file: {str(e)}")
        return pd.DataFrame()

def process_mc_detail(file_path):
    try:
        # Read CSV file
        df = pd.read_csv(file_path)

        # Convert amounts to numeric
        df['SettlementAmount'] = pd.to_numeric(df['SettlementAmount'], errors='coerce')
        df['Fee'] = pd.to_numeric(df['Fee'], errors='coerce')

        # Calculate net amount
        df['net_amount'] = df['SettlementAmount'] - df['Fee']

        # Ensure Cycle is two digits
        df['Cycle'] = df['Cycle'].astype(str).str.zfill(2)

        # Group by cycle
        cycle_totals = df.groupby('Cycle')['net_amount'].sum().reset_index()

        return cycle_totals

    except Exception as e:
        print(f"Error processing MC Detail file: {str(e)}")
        return pd.DataFrame()

def main():
    # Process both files
    summary_df = parse_summary_file(SUMMARY_FILE)
    mc_detail_df = process_mc_detail(MC_DETAIL_FILE)

    if summary_df.empty or mc_detail_df.empty:
        print("Error: Unable to process one or both files")
        return

    # Merge the dataframes
    comparison_df = pd.merge(
        summary_df,
        mc_detail_df,
        on='Cycle',
        how='outer'
    )

    # Clean up and format
    comparison_df = comparison_df[['Cycle', 'Summary Amount', 'net_amount']]
    comparison_df.columns = ['Cycle', 'Summary Amount', 'MC Detail Net']

    # Calculate difference
    comparison_df['Difference'] = comparison_df['MC Detail Net'] - comparison_df['Summary Amount']

    # Format amounts
    for col in ['Summary Amount', 'MC Detail Net', 'Difference']:
        comparison_df[col] = comparison_df[col].apply(lambda x: f"${x:,.2f}" if pd.notnull(x) else "N/A")

    # Sort by cycle
    comparison_df = comparison_df.sort_values('Cycle')

    # Display results
    print("\nMastercard Cycle Reconciliation:")
    print("=" * 100)
    print("Summary File vs MC Detail Comparison")
    print("-" * 100)
    print(comparison_df.to_string(index=False))
    print("=" * 100)

    # Check for missing cycles
    missing_in_summary = comparison_df[comparison_df['Summary Amount'] == 'N/A']['Cycle'].tolist()
    missing_in_mc_detail = comparison_df[comparison_df['MC Detail Net'] == 'N/A']['Cycle'].tolist()

    if missing_in_summary:
        print(f"\nCycles missing in Summary file: {', '.join(missing_in_summary)}")
    if missing_in_mc_detail:
        print(f"\nCycles missing in MC Detail file: {', '.join(missing_in_mc_detail)}")

if __name__ == "__main__":
    main()



import pandas as pd
import re
from datetime import datetime
import plotly.graph_objects as go
from IPython.display import HTML, display

# File paths
# File paths
SUMMARY_FILE = '/content/T140-00000034350-2025-04-28-T1408519211806.ASCII.T140.20250428141353.txt'
MC_DETAIL_FILE = '/content/mc_detail_20250428.csv'


def create_fintech_dashboard():
    # Process data
    summary_df = parse_summary_file(SUMMARY_FILE)
    mc_detail_df = process_mc_detail(MC_DETAIL_FILE)

    if summary_df.empty or mc_detail_df.empty:
        print("Error: Unable to process one or both files")
        return

    # Merge and prepare data
    comparison_df = pd.merge(summary_df, mc_detail_df, on='Cycle', how='outer')
    comparison_df['Difference'] = comparison_df['net_amount'] - comparison_df['Summary Amount']

    # Calculate totals
    total_summary = summary_df['Summary Amount'].sum()
    total_mc_detail = mc_detail_df['net_amount'].sum()
    total_difference = total_mc_detail - total_summary

    # Create styling
    display(HTML("""
    <style>
    .fintech-dashboard {
        font-family: 'SF Pro Display', Arial, sans-serif;
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
    }
    .header {
        background-color: #0a2f5c;
        color: white;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
    }
    .metric-row {
        display: flex;
        justify-content: space-between;
        margin: 20px 0;
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .metric-card {
        text-align: center;
        flex: 1;
        padding: 0 20px;
        border-right: 1px solid #eee;
    }
    .metric-card:last-child {
        border-right: none;
    }
    .metric-title {
        font-size: 14px;
        color: #666;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 8px;
    }
    .metric-value {
        font-size: 24px;
        font-weight: bold;
        color: #0a2f5c;
    }
    .metric-delta {
        font-size: 14px;
        margin-top: 5px;
    }
    .delta-positive {
        color: #28a745;
    }
    .delta-negative {
        color: #dc3545;
    }
    .reconciliation-status {
        background-color: white;
        padding: 15px;
        border-radius: 8px;
        margin-top: 20px;
        border-left: 4px solid #0a2f5c;
    }
    </style>
    """))

    # Create dashboard header
    header_html = f"""
    <div class="fintech-dashboard">
        <div class="header">
            <h2 style="margin:0">Mastercard Settlement Reconciliation</h2>
            <div style="font-size:14px;opacity:0.8">Last Updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</div>
        </div>
    """
    display(HTML(header_html))

    # Create metrics display
    metrics_html = f"""
    <div class="metric-row">
        <div class="metric-card">
            <div class="metric-title">Total Settlement Amount</div>
            <div class="metric-value">${abs(total_summary):,.2f}</div>
            <div class="metric-delta">From Summary File</div>
        </div>
        <div class="metric-card">
            <div class="metric-title">Total MC Detail Net</div>
            <div class="metric-value">${abs(total_mc_detail):,.2f}</div>
            <div class="metric-delta">From MC Detail</div>
        </div>
        <div class="metric-card">
            <div class="metric-title">Net Difference</div>
            <div class="metric-value {'delta-negative' if total_difference < 0 else 'delta-positive'}">
                ${abs(total_difference):,.2f}
            </div>
            <div class="metric-delta">
                {('Deficit' if total_difference < 0 else 'Surplus')}
            </div>
        </div>
    </div>
    """
    display(HTML(metrics_html))

    # Create cycle-wise comparison table
    comparison_df = comparison_df.sort_values('Cycle')
    styled_df = pd.DataFrame({
        'Cycle': comparison_df['Cycle'],
        'Summary Amount': comparison_df['Summary Amount'].apply(lambda x: f"${x:,.2f}"),
        'MC Detail Net': comparison_df['net_amount'].apply(lambda x: f"${x:,.2f}"),
        'Difference': comparison_df['Difference'].apply(lambda x: f"${x:,.2f}"),
        'Status': comparison_df['Difference'].apply(lambda x: '✓' if abs(x) < 0.01 else '⚠️')
    })

    # Style the table
    def style_negative_values(val):
        if isinstance(val, str) and val.startswith('$'):
            num = float(val.replace('$', '').replace(',', ''))
            return 'color: #dc3545' if num < 0 else 'color: #28a745'
        return ''

    styled_table = styled_df.style\
        .set_properties(**{
            'background-color': 'white',
            'border-color': '#eee',
            'border-style': 'solid',
            'border-width': '1px',
            'text-align': 'center',
            'padding': '12px'
        })\
        .set_table_styles([{
            'selector': 'th',
            'props': [
                ('background-color', '#0a2f5c'),
                ('color', 'white'),
                ('font-weight', 'bold'),
                ('text-align', 'center'),
                ('padding', '12px')
            ]
        }])\
        .map(style_negative_values, subset=['Difference'])

    print("\nCycle-wise Reconciliation Details:")
    display(styled_table)

    # Show reconciliation status
    tolerance = 0.01
    total_matched = (abs(comparison_df['Difference']) <= tolerance).all()

    status_html = f"""
    <div class="reconciliation-status">
        <h3 style="margin:0;color:#0a2f5c">Reconciliation Status</h3>
        <div style="margin-top:10px">
            <span style="font-size:24px">{('✅' if total_matched else '❌')}</span>
            <span style="margin-left:10px">
                {('All cycles reconciled within tolerance' if total_matched else 'Discrepancies detected in one or more cycles')}
            </span>
        </div>
    </div>
    </div>
    """
    display(HTML(status_html))

if __name__ == "__main__":
    create_fintech_dashboard()

